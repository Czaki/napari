on:
  workflow_call:
    inputs:
      python_version:
        required: true
        type: string
      platform:
        required: false
        type: string
        default: "ubuntu-22.04"
      toxenv:
        required: false
        type: string
        default: ""
      qt_backend:
        required: false
        type: string
        default: "PyQt5"
      min_req:
        required: false
        type: string
        default: ""
      coverage:
        required: false
        type: boolean
        default: False
      timeout:
        required: false
        type: number
        default: 40

jobs:
  test:
    name: ${{ inputs.platform }} py ${{ inputs.python_version }} ${{ inputs.qt_backend }}
    runs-on: ${{ inputs.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}
          cache: "pip"
          cache-dependency-path: setup.cfg

      - uses: tlambert03/setup-qt-libs@v1

      # strategy borrowed from vispy for installing opengl libs on windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1
          if (Test-Path -Path "C:\Windows\system32\opengl32.dll" -PathType Leaf) {Exit 0} else {Exit 1}

      # tox and tox-gh-actions will take care of the "actual" installation
      # of python dependendencies into a virtualenv.  see tox.ini for more
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install setuptools tox tox-gh-actions tox-min-req

      # here we pass off control of environment creation and running of tests to tox
      # tox-gh-actions, installed above, helps to convert environment variables into
      # tox "factors" ... limiting the scope of what gets tested on each platform
      # for instance, on ubuntu-latest with python 3.8, it would be equivalent to this command:
      # `tox -e py38-linux-pyqt,py38-linux-pyside`
      # see tox.ini for more
      - name: Test with tox
        # the longest is macos-latest 3.9 pyqt5 at ~30 minutes.
        timeout-minutes: ${{ inputs.timeout }}
        uses: aganders3/headless-gui@v1
        with:
          run: python -m tox
        env:
          PLATFORM: ${{ inputs.platform }}
          BACKEND: ${{ inputs.qt_backend }}
          TOXENV: ${{ inputs.toxenv }}
          NUMPY_EXPERIMENTAL_ARRAY_FUNCTION: ${{ inputs.MIN_REQ || 1 }}
          PYVISTA_OFF_SCREEN: True
          MIN_REQ: ${{ inputs.min_req }}
          FORCE_COLOR: 1
          PIP_CONSTRAINT: resources/constraints/constraints_py${{ inputs.python }}${{ inputs.min_req && '_min_req' }}.txt
      - uses: actions/upload-artifact@v3
        with:
          name: upload pytest timing reports as json
          path: |
            ./report-*.json

      - uses: actions/upload-artifact@v3
        if: ${{ inputs.coverage }}
        with:
          name: coverage reports
          path: |
            ./.coverage.*
