# Our minimal suite of tests that run on each pull request
name: PR Test

on:
  pull_request:
    branches:
      - main
      - "v*x"

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  COLUMNS: 120

jobs:
  manifest:
    # make sure all necessary files will be bundled in the release
    name: Check Manifest
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache-dependency-path: setup.cfg
          cache: 'pip'
      - name: Install Dependencies
        run: pip install --upgrade pip
      - name: Install Napari dev
        run: pip install -e .[build]
      - name: Check Manifest
        run: |
          make typestubs
          make check-manifest

  localization_syntax:
    # make sure all necessary files will be bundled in the release
    name: Check l18n syntax
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Check localization formatting
        run: |
          pip install --upgrade pip semgrep
          # f"..." and f'...' are the same for semgrep
          semgrep --error --lang python --pattern 'trans._(f"...")' napari
          semgrep --error --lang python --pattern 'trans._($X.format(...))' napari

  test_without_coverage:
    name: ${{ matrix.platform }} no cov
    uses: ./.github/workflows/base_test_workflow.yml
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        python: ["3.8", "3.9", "3.10", "3.11"]
        backend: [pyqt5, pyside2]
        exclude:
          - python: '3.11'
            backend: pyside2
        include:
          # Windows py38
          - python: 3.8
            platform: windows-latest
            backend: pyqt5
          - python: 3.8
            platform: windows-latest
            backend: pyside2
          - python: 3.9
            platform: macos-latest
            backend: pyqt5
          # minimum specified requirements
          - python: 3.8
            platform: ubuntu-20.04
            backend: pyqt5
            MIN_REQ: 1
          # test without any Qt backends
          - python: 3.8
            platform: ubuntu-20.04
            toxenv: headless-py38-linux
          - python: 3.9
            platform: ubuntu-latest
            backend: pyqt6
          - python: 3.9
            platform: ubuntu-latest
            backend: pyside6
          # pyside 6
          - python: '3.10'
            platform: ubuntu-latest
            backend: pyside6
          - python: '3.11'
            platform: ubuntu-latest
            backend: pyside6

    with:
      python_version: ${{ matrix.python }}
      platform: ${{ matrix.platform }}
      qt_backend: ${{ matrix.backend }}
      min_req: ${{ matrix.MIN_REQ }}
      coverage: False
      toxenv: ${{ matrix.toxenv }}


  test:
    name: ${{ matrix.platform }}
    uses: ./.github/workflows/base_test_workflow.yml
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
        python: ["3.8", "3.9", "3.10", "3.11"]
        backend: [pyqt5, pyside2]
        exclude:
          - python: '3.11'
            backend: pyside2
        include:
          # Windows py38
          - python: 3.8
            platform: windows-latest
            backend: pyqt5
          - python: 3.8
            platform: windows-latest
            backend: pyside2
          - python: 3.9
            platform: macos-latest
            backend: pyqt5
          # minimum specified requirements
          - python: 3.8
            platform: ubuntu-20.04
            backend: pyqt5
            MIN_REQ: 1
          # test without any Qt backends
          - python: 3.8
            platform: ubuntu-20.04
            toxenv: headless-py38-linux
          - python: 3.9
            platform: ubuntu-latest
            backend: pyqt6
          - python: 3.9
            platform: ubuntu-latest
            backend: pyside6
          # pyside 6
          - python: '3.10'
            platform: ubuntu-latest
            backend: pyside6
          - python: '3.11'
            platform: ubuntu-latest
            backend: pyside6

    with:
      python_version: ${{ matrix.python }}
      platform: ${{ matrix.platform }}
      qt_backend: ${{ matrix.backend }}
      min_req: ${{ matrix.MIN_REQ }}
      coverage: True
      toxenv: ${{ matrix.toxenv }}

  coverage_report:
    runs-on: ubuntu-22.04
    if: ${{ always() }}
    needs: test
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache-dependency-path: setup.cfg
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install codecov

      - name: Download coverage data
        uses: actions/download-artifact@v2
        with:
          name: coverage reports
          path: coverage

      - name: combine coverage data
        run: |
          coverage combine coverage
          coverage xml -o coverage.xml

      - name: Upload coverage data
        uses: codecov/codecov-action@v3


  test_pip_install:
    name: ubuntu-latest 3.9 pip install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: napari-from-github

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: "pip"
          cache-dependency-path: napari-from-github/setup.cfg

      - uses: tlambert03/setup-qt-libs@v1

      - name: Install this commit
        run: |
          pip install --upgrade pip
          pip install ./napari-from-github[all,testing]
        env:
          PIP_CONSTRAINT: napari-from-github/resources/constraints/constraints_py3.9.txt

      - name: Test
        uses: aganders3/headless-gui@v1
        with:
          run: |
            python -m pytest --pyargs napari --color=yes
            python -m pytest --pyargs napari_builtins --color=yes

  test_examples:
    name: test examples
    uses: ./.github/workflows/base_test_workflow.yml
    with:
        toxenv: py39-linux-pyside2-examples
        timeout: 60
        python_version: 3.9
        constraints_suffix: _examples
